{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/wcandillon/tmp/react-native-expo-image-cache/src/Image.tsx\";\nimport * as _ from \"lodash\";\nimport * as React from \"react\";\nimport RNImage from \"react-native-web/dist/exports/Image\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { BlurView } from \"expo-blur\";\nimport CacheManager from \"./CacheManager\";\nvar Image = function (_React$Component) {\n  _inherits(Image, _React$Component);\n  function Image() {\n    var _getPrototypeOf2;\n    var _this;\n    _classCallCheck(this, Image);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Image)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.mounted = true;\n    _this.state = {\n      uri: undefined,\n      intensity: new Animated.Value(100)\n    };\n    return _this;\n  }\n  _createClass(Image, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.load(this.props);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this$props = this.props,\n        preview = _this$props.preview,\n        transitionDuration = _this$props.transitionDuration,\n        newURI = _this$props.uri;\n      var _this$state = this.state,\n        uri = _this$state.uri,\n        intensity = _this$state.intensity;\n      if (newURI !== prevProps.uri) {\n        this.load(this.props);\n      } else if (uri && preview && prevState.uri === undefined) {\n        Animated.timing(intensity, {\n          duration: transitionDuration,\n          toValue: 0,\n          useNativeDriver: Platform.OS === \"android\"\n        }).start();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.mounted = false;\n    }\n  }, {\n    key: \"load\",\n    value: function load(_ref) {\n      var uri, _ref$options, options, onError, path;\n      return _regeneratorRuntime.async(function load$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              uri = _ref.uri, _ref$options = _ref.options, options = _ref$options === void 0 ? {} : _ref$options, onError = _ref.onError;\n              if (!uri) {\n                _context.next = 12;\n                break;\n              }\n              _context.prev = 2;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(CacheManager.get(uri, options).getPath());\n            case 5:\n              path = _context.sent;\n              if (this.mounted) {\n                if (path) {\n                  this.setState({\n                    uri: path\n                  });\n                } else {\n                  onError({\n                    nativeEvent: {\n                      error: new Error(\"Could not load image\")\n                    }\n                  });\n                }\n              }\n              _context.next = 12;\n              break;\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](2);\n              onError({\n                nativeEvent: {\n                  error: _context.t0\n                }\n              });\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[2, 9]]);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n        preview = _this$props2.preview,\n        style = _this$props2.style,\n        defaultSource = _this$props2.defaultSource,\n        tint = _this$props2.tint,\n        otherProps = _objectWithoutProperties(_this$props2, [\"preview\", \"style\", \"defaultSource\", \"tint\"]);\n      var _this$state2 = this.state,\n        uri = _this$state2.uri,\n        intensity = _this$state2.intensity;\n      var isImageReady = !!uri;\n      var opacity = intensity.interpolate({\n        inputRange: [0, 100],\n        outputRange: [0, 0.5]\n      });\n      var flattenedStyle = StyleSheet.flatten(style);\n      var computedStyle = [StyleSheet.absoluteFill, _.transform(_.pickBy(flattenedStyle, function (_val, key) {\n        return propsToCopy.indexOf(key) !== -1;\n      }), function (result, value, key) {\n        return _extends(result, _defineProperty({}, key, value - (flattenedStyle.borderWidth || 0)));\n      })];\n      return React.createElement(View, _extends({\n        style: style\n      }, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        }\n      }), !!defaultSource && !isImageReady && React.createElement(RNImage, _extends({\n        source: defaultSource,\n        style: computedStyle\n      }, otherProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        }\n      })), !!preview && React.createElement(RNImage, _extends({\n        source: preview,\n        style: computedStyle,\n        blurRadius: Platform.OS === \"android\" ? 0.5 : 0\n      }, otherProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        }\n      })), isImageReady && React.createElement(RNImage, _extends({\n        source: {\n          uri: uri\n        },\n        style: computedStyle\n      }, otherProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        }\n      })), !!preview && Platform.OS === \"ios\" && React.createElement(AnimatedBlurView, _extends({\n        style: computedStyle\n      }, {\n        intensity: intensity,\n        tint: tint\n      }, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        }\n      })), !!preview && Platform.OS === \"android\" && React.createElement(Animated.View, {\n        style: [computedStyle, {\n          backgroundColor: tint === \"dark\" ? black : white,\n          opacity: opacity\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        }\n      }));\n    }\n  }]);\n  return Image;\n}(React.Component);\nImage.defaultProps = {\n  transitionDuration: 300,\n  tint: \"dark\",\n  onError: function onError() {}\n};\nexport { Image as default };\nvar black = \"black\";\nvar white = \"white\";\nvar propsToCopy = [\"borderRadius\", \"borderBottomLeftRadius\", \"borderBottomRightRadius\", \"borderTopLeftRadius\", \"borderTopRightRadius\"];\nvar AnimatedBlurView = Animated.createAnimatedComponent(BlurView);","map":{"version":3,"mappings":"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","names":["_","React","BlurView","CacheManager","Image","mounted","state","uri","undefined","intensity","Animated","Value","load","props","prevProps","prevState","preview","transitionDuration","newURI","timing","duration","toValue","useNativeDriver","Platform","OS","start","options","onError","get","getPath","path","setState","nativeEvent","error","Error","style","defaultSource","tint","otherProps","isImageReady","opacity","interpolate","inputRange","outputRange","flattenedStyle","StyleSheet","flatten","computedStyle","absoluteFill","transform","pickBy","_val","key","propsToCopy","indexOf","result","value","_extends","borderWidth","View","__source","fileName","lineNumber","RNImage","source","blurRadius","AnimatedBlurView","backgroundColor","black","white","Component","defaultProps","createAnimatedComponent"],"sources":["Image.tsx"],"sourcesContent":["// @flow\nimport * as _ from \"lodash\";\nimport * as React from \"react\";\nimport {\n  Image as RNImage,\n  Animated,\n  StyleSheet,\n  View,\n  Platform,\n  ImageStyle,\n  ImageURISource,\n  ImageSourcePropType,\n  StyleProp\n} from \"react-native\";\nimport { BlurView } from \"expo-blur\";\n\nimport CacheManager, { DownloadOptions } from \"./CacheManager\";\n\ninterface ImageProps {\n  style?: StyleProp<ImageStyle>;\n  defaultSource?: ImageURISource | number;\n  preview?: ImageSourcePropType;\n  options?: DownloadOptions;\n  uri: string;\n  transitionDuration?: number;\n  tint?: \"dark\" | \"light\";\n  onError: (error: { nativeEvent: { error: Error } }) => void;\n}\n\ninterface ImageState {\n  uri: string | undefined;\n  intensity: Animated.Value;\n}\n\nexport default class Image extends React.Component<ImageProps, ImageState> {\n  mounted = true;\n\n  static defaultProps = {\n    transitionDuration: 300,\n    tint: \"dark\",\n    onError: () => {}\n  };\n\n  state = {\n    uri: undefined,\n    intensity: new Animated.Value(100)\n  };\n\n  componentDidMount() {\n    this.load(this.props);\n  }\n\n  componentDidUpdate(prevProps: ImageProps, prevState: ImageState) {\n    const { preview, transitionDuration, uri: newURI } = this.props;\n    const { uri, intensity } = this.state;\n    if (newURI !== prevProps.uri) {\n      this.load(this.props);\n    } else if (uri && preview && prevState.uri === undefined) {\n      Animated.timing(intensity, {\n        duration: transitionDuration,\n        toValue: 0,\n        useNativeDriver: Platform.OS === \"android\"\n      }).start();\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  async load({ uri, options = {}, onError }: ImageProps): Promise<void> {\n    if (uri) {\n      try {\n        const path = await CacheManager.get(uri, options).getPath();\n        if (this.mounted) {\n          if (path) {\n            this.setState({ uri: path });\n          } else {\n            onError({ nativeEvent: { error: new Error(\"Could not load image\") } });\n          }\n        }\n      } catch (error) {\n        onError({ nativeEvent: { error } });\n      }\n    }\n  }\n\n  render() {\n    const { preview, style, defaultSource, tint, ...otherProps } = this.props;\n    const { uri, intensity } = this.state;\n    const isImageReady = !!uri;\n    const opacity = intensity.interpolate({\n      inputRange: [0, 100],\n      outputRange: [0, 0.5]\n    });\n    const flattenedStyle = StyleSheet.flatten(style);\n    const computedStyle: StyleProp<ImageStyle> = [\n      StyleSheet.absoluteFill,\n      _.transform(_.pickBy(flattenedStyle, (_val, key) => propsToCopy.indexOf(key) !== -1), (result, value: any, key) =>\n        Object.assign(result, { [key]: value - (flattenedStyle.borderWidth || 0) })\n      )\n    ];\n    return (\n      <View {...{ style }}>\n        {!!defaultSource && !isImageReady && <RNImage source={defaultSource} style={computedStyle} {...otherProps} />}\n        {!!preview && (\n          <RNImage\n            source={preview}\n            style={computedStyle}\n            blurRadius={Platform.OS === \"android\" ? 0.5 : 0}\n            {...otherProps}\n          />\n        )}\n        {isImageReady && <RNImage source={{ uri }} style={computedStyle} {...otherProps} />}\n        {!!preview && Platform.OS === \"ios\" && <AnimatedBlurView style={computedStyle} {...{ intensity, tint }} />}\n        {!!preview && Platform.OS === \"android\" && (\n          <Animated.View style={[computedStyle, { backgroundColor: tint === \"dark\" ? black : white, opacity }]} />\n        )}\n      </View>\n    );\n  }\n}\n\nconst black = \"black\";\nconst white = \"white\";\nconst propsToCopy = [\n  \"borderRadius\",\n  \"borderBottomLeftRadius\",\n  \"borderBottomRightRadius\",\n  \"borderTopLeftRadius\",\n  \"borderTopRightRadius\"\n];\nconst AnimatedBlurView = Animated.createAnimatedComponent(BlurView);\n"]},"metadata":{},"sourceType":"module"}