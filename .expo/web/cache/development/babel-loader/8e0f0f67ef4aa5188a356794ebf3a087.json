{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { useEffect, useRef } from 'react';\nimport { useState } from 'react';\nimport * as Notifications from 'expo-notifications';\nimport * as Device from 'expo-device';\nimport expoPushTokensApi from \"../api/expoPushTokens\";\nimport navigate from \"../navigation/rootNavigation\";\nNotifications.setNotificationHandler({\n  handleNotification: function () {\n    var _handleNotification = _asyncToGenerator(function* () {\n      return {\n        shouldShowAlert: true,\n        shouldPlaySound: true,\n        shouldSetBadge: true\n      };\n    });\n    function handleNotification() {\n      return _handleNotification.apply(this, arguments);\n    }\n    return handleNotification;\n  }()\n});\nexport default useNavigations = function useNavigations(notificationAddListener) {\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    expoPushToken = _useState2[0],\n    setExpoPushToken = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    notification = _useState4[0],\n    setNotification = _useState4[1];\n  var notificationListener = useRef();\n  var responseListener = useRef();\n  console.log(notificationAddListener);\n  useEffect(function () {\n    registerForPushNotifications();\n    if (notificationAddListener) {\n      notificationListener.current = Notifications.addNotificationReceivedListener(function (notificationAddListener) {\n        console.log(notificationAddListener);\n        setNotification(notificationAddListener);\n      });\n      responseListener.current = Notifications.addNotificationResponseReceivedListener(function (response) {\n        console.log(response);\n        navigate.navigate(notificationAddListener);\n      });\n    }\n    return function () {\n      Notifications.removeNotificationSubscription(notificationListener.current);\n      Notifications.removeNotificationSubscription(responseListener.current);\n    };\n  }, []);\n  var registerForPushNotifications = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        var token = yield registerForPushNotificationsAsync();\n        setExpoPushToken(token);\n        expoPushTokensApi.register(token);\n      } catch (error) {\n        console.log('Error getting a push token', error);\n      }\n    });\n    return function registerForPushNotifications() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nfunction registerForPushNotificationsAsync() {\n  return _registerForPushNotificationsAsync.apply(this, arguments);\n}\nfunction _registerForPushNotificationsAsync() {\n  _registerForPushNotificationsAsync = _asyncToGenerator(function* () {\n    var token;\n    if (Platform.OS === 'android') {\n      yield Notifications.setNotificationChannelAsync('default', {\n        name: 'default',\n        importance: Notifications.AndroidImportance.MAX,\n        vibrationPattern: [0, 250, 250, 250],\n        lightColor: '#FF231F7C'\n      });\n    }\n    if (Device.isDevice) {\n      var _yield$Notifications$ = yield Notifications.getPermissionsAsync(),\n        existingStatus = _yield$Notifications$.status;\n      var finalStatus = existingStatus;\n      if (existingStatus !== 'granted') {\n        var _yield$Notifications$2 = yield Notifications.requestPermissionsAsync(),\n          status = _yield$Notifications$2.status;\n        finalStatus = status;\n      }\n      if (finalStatus !== 'granted') {\n        alert('Failed to get push token for push notification!');\n        return;\n      }\n      token = (yield Notifications.getExpoPushTokenAsync()).data;\n      console.log(token);\n    } else {\n      alert('Must use physical device for Push Notifications');\n    }\n    return token;\n  });\n  return _registerForPushNotificationsAsync.apply(this, arguments);\n}","map":{"version":3,"names":["useEffect","useRef","useState","Notifications","Device","expoPushTokensApi","navigate","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","useNavigations","notificationAddListener","expoPushToken","setExpoPushToken","notification","setNotification","notificationListener","responseListener","console","log","registerForPushNotifications","current","addNotificationReceivedListener","addNotificationResponseReceivedListener","response","removeNotificationSubscription","token","registerForPushNotificationsAsync","register","error","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor","isDevice","getPermissionsAsync","existingStatus","status","finalStatus","requestPermissionsAsync","alert","getExpoPushTokenAsync","data"],"sources":["D:/coues-React Native/Tools2Go/app/hooks/useNotifications.js"],"sourcesContent":["import {useEffect,useRef} from 'react';\r\nimport {useState} from 'react';\r\nimport * as Notifications from 'expo-notifications';\r\nimport * as Device from 'expo-device';\r\nimport expoPushTokensApi from '../api/expoPushTokens';\r\nimport navigate from '../navigation/rootNavigation';\r\n\r\nNotifications.setNotificationHandler({\r\n       handleNotification: async () => ({\r\n              shouldShowAlert: true,\r\n              shouldPlaySound: true,\r\n              shouldSetBadge: true,\r\n       }),\r\n});\r\n\r\n\r\n\r\nexport default useNavigations =(notificationAddListener) =>{\r\n       const [expoPushToken, setExpoPushToken] = useState('');\r\n       const [notification, setNotification] = useState(false);\r\n       const notificationListener = useRef();\r\n       const responseListener = useRef();\r\n       console.log(notificationAddListener);\r\n\r\n       useEffect(() => {\r\n              registerForPushNotifications();\r\n\r\n              if(notificationAddListener){\r\n                     notificationListener.current = Notifications.addNotificationReceivedListener(notificationAddListener => {\r\n                            console.log(notificationAddListener);\r\n                            setNotification(notificationAddListener);\r\n                          });\r\n                       \r\n                          responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\r\n                            console.log(response);\r\n                            navigate.navigate(notificationAddListener);\r\n                            \r\n                          });\r\n\r\n\r\n              }\r\n\r\n              return () => {\r\n                     Notifications.removeNotificationSubscription(notificationListener.current);\r\n                     Notifications.removeNotificationSubscription(responseListener.current);\r\n                   };\r\n             \r\n                  \r\n\r\n       }, []);\r\n\r\n       const registerForPushNotifications = async () => {\r\n              try {\r\n                     const token = await registerForPushNotificationsAsync();\r\n                     setExpoPushToken(token);\r\n                     expoPushTokensApi.register(token);\r\n              } catch (error) {\r\n                     console.log('Error getting a push token', error);\r\n              }\r\n       }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nasync function registerForPushNotificationsAsync() {\r\n       let token;\r\n     \r\n       if (Platform.OS === 'android') {\r\n         await Notifications.setNotificationChannelAsync('default', {\r\n           name: 'default',\r\n           importance: Notifications.AndroidImportance.MAX,\r\n           vibrationPattern: [0, 250, 250, 250],\r\n           lightColor: '#FF231F7C',\r\n         });\r\n       }\r\n     \r\n       if (Device.isDevice) {\r\n         const { status: existingStatus } = await Notifications.getPermissionsAsync();\r\n         let finalStatus = existingStatus;\r\n         if (existingStatus !== 'granted') {\r\n           const { status } = await Notifications.requestPermissionsAsync();\r\n           finalStatus = status;\r\n         }\r\n         if (finalStatus !== 'granted') {\r\n           alert('Failed to get push token for push notification!');\r\n           return;\r\n         }\r\n         token = (await Notifications.getExpoPushTokenAsync()).data;\r\n         console.log(token);\r\n       } else {\r\n         alert('Must use physical device for Push Notifications');\r\n       }\r\n     \r\n       return token;\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}